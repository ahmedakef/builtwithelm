#!/usr/bin/env bash

#
# USAGE: [root=path] [optimize_html=0*|1] [optimize_css=0*|1] [optimize_js=0*|1|2|3] build
#

set -euo pipefail

root="${root:-}"
optimize_html="${optimize_html:-0}"
optimize_css="${optimize_css:-0}"
optimize_js="${optimize_js:-0}"

src="${project:?}"
out="${build:?}/builtwithelm"
web_root="$out/$root"

clean () {
  rm -rf "$out"
}

prepare_web_root () {
  mkdir -p "$web_root"
}

build_html () {
  if [[ "$optimize_html" = 0 ]]; then
    cp "$src"/public/*.html "$web_root"
  else
    npx html-minifier           \
      --collapse-whitespace     \
      --minify-js               \
      --remove-tag-whitespace   \
      --file-ext html           \
      --input-dir "$src/public" \
      --output-dir "$web_root"
  fi
}

build_css () {
  if [[ "$optimize_css" = 0 ]]; then
    cp "$src"/public/index.css "$web_root"
  else
    npx postcss --config "$src/config" "$src/public/index.css" -o "$web_root/index.css"
  fi
}

build_images () {
  cp -r "$src/public/images" "$web_root"
}

build_data () {
  cp -r "$src/public/data" "$web_root"
}

build_js () {
  case "${optimize_js}" in
    1|2|3)
      func=build_js_optimize_"$optimize_js"
      ;;
    *)
      func=build_js_debug
      ;;
  esac

  "$func" "$src/src/Main.elm" "$web_root/app.js"
}

build_js_debug () {
  elm make "$1" --debug --output "$2"
}

build_js_optimize_1 () {
  elm make "$1" --optimize --output "$2"
  minify "$2"
}

build_js_optimize_2 () {
  elm-optimize-level-2 "$1" --output "$2"
  minify "$2"
}

build_js_optimize_3 () {
  elm-optimize-level-2 "$1" --optimize-speed --output "$2"
  minify "$2"
}

minify () {
  js="$1"
  min="${js%.js}.min.js"

  terser "$js" --compress 'pure_funcs="F2,F3,F4,F5,F6,F7,F8,F9,A2,A3,A4,A5,A6,A7,A8,A9",pure_getters,keep_fargs=false,unsafe_comps,unsafe' | terser --mangle --output "$min"
  mv "$min" "$js"
}

cd "$src" && clean && prepare_web_root && build_html && build_css && build_images && build_data && build_js
